# Browser-Use Agent Integration PRD

## 1. Overview
Complete the browser-use agent integration in PK Code CLI to enable browser automation capabilities through MCP integration. The codebase has partial browser-use integration but missing critical CLI command registration and configuration functionality.

## 2. Goals & Objectives

### 1. Complete Browser-Use Agent Integration
*   **Goal:** Enable full browser automation capabilities through MCP integration
    *   **Metric:** `pk agent start browser` and `pk agent stop browser` commands work correctly
    *   **Time-Bound:** Within 1 week

### 2. Browser Configuration Command
*   **Goal:** Implement browser configuration setup for users
    *   **Metric:** `pk config browser` command properly configures Chrome user data directory
    *   **Time-Bound:** Within 1 week

### 3. Agent Command Registration
*   **Goal:** Register agent commands with CLI command structure
    *   **Metric:** Agent commands appear in help and are accessible
    *   **Time-Bound:** Within 3 days

### 4. Browser Tools Availability
*   **Goal:** Ensure browser automation tools are discoverable by AI agent
    *   **Metric:** Browser tools (browser.navigate, browser.click, etc.) are available during chat sessions
    *   **Time-Bound:** Within 1 week

## 3. Target Users & Personas
PK Code CLI users who want to use browser automation capabilities for testing, scraping, or other browser-based tasks through AI assistance.

## 4. Key Features / Requirements

| # | Feature | Description | Acceptance Criteria |
|---|---|---|---|
| 1 | **Agent Command Registration** | Register the agent command with CLI command structure so users can access `pk agent start browser` and `pk agent stop browser` commands. | - Agent command appears in `pk --help` output<br>- `pk agent start browser` launches browser-use MCP server<br>- `pk agent stop browser` terminates browser-use MCP server<br>- Commands provide proper error messages and feedback |
| 2 | **Browser Configuration Command** | Implement `pk config browser` command to interactively set up Chrome user data directory path and update `.mcp.json` configuration. | - `pk config browser` command is available<br>- Interactive setup finds Chrome user data directory<br>- Updates `.mcp.json` with correct path<br>- Validates that the configured path exists |
| 3 | **Browser Agent Process Management** | Ensure proper lifecycle management of browser-use MCP server process including PID file handling and cross-platform compatibility. | - PID file is created and managed correctly<br>- Process starts and stops cleanly<br>- Works on Windows platform<br>- Handles error cases gracefully |
| 4 | **MCP Server Integration** | Verify browser-use MCP server connects properly and browser tools are discoverable by the AI agent during chat sessions. | - Browser tools are prefixed correctly (e.g., browser.navigate)<br>- Tools are available during AI chat sessions<br>- MCP server starts without errors<br>- Tools function correctly when called |
| 5 | **Script and Path Fixes** | Update start-browser-agent.sh script to use proper environment variables and paths from `.mcp.json` configuration. | - Script uses BROWSER_USE_USER_DATA_DIR from config<br>- Script runs uvx browser-use --mcp correctly<br>- Script handles errors and provides logging<br>- Works with configured environment variables |

## 5. Non-functional Requirements

### 1. Performance
*   **Command Response:** Agent commands should respond within 2 seconds
*   **Process Startup:** Browser-use MCP server should start within 10 seconds

### 2. Compatibility
*   **Windows Support:** Must work on Windows 10 and higher
*   **Chrome Browser:** Must work with standard Chrome installations
*   **Node.js:** Compatible with existing PK Code Node.js requirements

### 3. Security
*   **Process Isolation:** Browser-use server runs as separate process
*   **Data Directory:** Respects Chrome user data directory permissions

## 6. Technical Constraints & Stack

### Current Stack
- TypeScript/Node.js CLI application
- Commander.js for CLI commands
- MCP (Model Context Protocol) for tool integration
- browser-use Python package for browser automation

### Constraints
- Must maintain existing CLI command structure
- Must follow existing MCP integration patterns
- Windows compatibility required
- Must work with existing `.mcp.json` configuration format

## 7. Current State Analysis

### Existing Components
- `.mcp.json` has browser-use server configuration
- `packages/cli/src/commands/agent.ts` has agent start/stop logic
- `scripts/start-browser-agent.sh` exists but has placeholder path
- MCP client in `packages/core/src/tools/mcp-client.ts` handles browser-use tools with special prefixing

### Missing Components
- Agent command not registered with CLI
- No browser configuration command
- Start script has hardcoded placeholder path
- No integration between config command and MCP configuration

## 8. Implementation Plan

### Phase 1: Command Registration (Day 1)
- Register agent command with CLI command structure
- Update CLI help to show agent commands

### Phase 2: Browser Configuration (Days 2-3)
- Implement `pk config browser` command
- Add Chrome user data directory detection
- Update `.mcp.json` configuration

### Phase 3: Process Management (Days 4-5)
- Fix start-browser-agent.sh script
- Ensure proper PID file handling
- Test Windows compatibility

### Phase 4: Integration Testing (Days 6-7)
- Verify MCP server starts correctly
- Test browser tools availability
- End-to-end testing of browser automation

## 9. Success Metrics

### Functional Success
- `pk agent start browser` command works without errors
- `pk agent stop browser` command works without errors
- `pk config browser` command successfully configures Chrome path
- Browser tools (browser.navigate, browser.click, etc.) are available in AI sessions

### Technical Success
- MCP server starts within 10 seconds
- Commands respond within 2 seconds
- No breaking changes to existing CLI functionality
- Windows compatibility maintained

## 10. Risks & Mitigations

| Risk | Likelihood | Impact | Mitigation |
|---|---|---|---|
| Browser-use package not installed | Medium | High | Check for uvx/browser-use availability, provide clear error messages |
| Chrome path detection fails | Medium | Medium | Provide manual path entry option, support multiple browser types |
| Windows script compatibility | High | Medium | Create Windows-compatible process spawning, test on Windows |
| MCP connection issues | Low | High | Robust error handling, fallback to CLI-only mode |

